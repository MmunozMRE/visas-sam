const metodoCatalogoItem = {
    route: 'catalogoitem'
}
var serviceCatalogoItem = {
    //async function insObjetivosSectorial(request) {
    async insCatalogoItem(request, headersprivilegios) {

        var requestOptions = {
            method: 'POST',
            headers: headersprivilegios,
            redirect: 'follow',
            body: JSON.stringify(request)
        };
        var datos = await fetch(`${API_URL}${metodoCatalogoItem.route}/guardar`, requestOptions)
            .then(res => res.json())
            .then(res => res)
            .catch(err => err);

        if (datos.messages !== undefined) {
            return Promise.reject(datos);
        } else {
            return Promise.resolve(datos);
        }
    },
    async updCatalogoItem(request, headersprivilegios) {

        var requestOptions = {
            method: 'PUT',
            headers: headersprivilegios,
            redirect: 'follow',
            body: JSON.stringify(request)
        };
        var datos = await fetch(`${API_URL}${metodoCatalogoItem.route}/actualizar`, requestOptions)
            .then(res => res.json())
            .then(res => res)
            .catch(err => err);
        if (datos.messages !== undefined) {
            return Promise.reject(datos);
        } else {
            return Promise.resolve(datos);
        }
    },

    async getCatalogoItemPorId(request, headersprivilegios) {
        var requestOptions = {
            method: 'GET',
            headers: headersprivilegios,
            redirect: 'follow',
            //body: JSON.stringify(request),
        };

        var datos = await fetch(`${API_URL}${metodoCatalogoItem.route}/obtener?${formatParameter(request)}`, requestOptions)
            .then(res => res.json())
            .then(res => res)
            .catch(err => err);

        if (datos.messages !== undefined) {
            return Promise.reject(datos);
        } else {
            return Promise.resolve(datos);
        }
    },
    async getCatalogoItemPaginado(request, headersprivilegios) {
        var requestOptions = {
            method: 'GET',
            headers: headersprivilegios,
            redirect: 'follow',
        };
        var datos = await fetch(`${API_URL}${metodoCatalogoItem.route}/obtenerpaginado?${formatParameter(request)}`, requestOptions)
            .then(response => {


                console.log("***999", response.headers.get('x-token-not-sent'));
                response.headers.forEach(function (value, name) {
                    console.log(name + ": " + value);
                });
                return response.json()
                //if (response.ok)
                //    return response.json()
                //else
                //   return new Error(response.status);
            })
            .then(data => data)
            .catch(error => error);

        //  console.log("** datos", datos);

        if (datos.messages !== undefined) {
            return Promise.reject(datos);
        } else {
            return Promise.resolve(datos);
        }
    },
    async delCatalogoItem(request, headersprivilegios) {
        var requestOptions = {
            method: 'PUT',
            headers: headersprivilegios,
            redirect: 'follow',
            body: JSON.stringify(request),
        };

        var datos = await fetch(`${API_URL}${metodoCatalogoItem.route}/eliminar`, requestOptions)
            .then(res => res.json())
            .then(res => res)
            .catch(err => err);

        if (datos.messages !== undefined) {
            return Promise.reject(datos);
        } else {
            return Promise.resolve(datos);
        }
    },
    async getTipoDocumento(headersprivilegios) {
        var requestOptions = {
            method: 'GET',
            headers: headersprivilegios,
            redirect: 'follow',
        };

        var datos = await fetch(`${API_URL}${metodoCatalogoItem.route}/obtenertipodocumento`, requestOptions)
            .then(res => res.json())
            .then(res => res)
            .catch(err => err);

        if (datos.messages !== undefined) {
            return Promise.reject(datos);
        } else {
            return Promise.resolve(datos);
        }
    },
    async getClasificacionDocumento(headersprivilegios) {
        var requestOptions = {
            method: 'GET',
            headers: headersprivilegios,
            redirect: 'follow',
        };

        var datos = await fetch(`${API_URL}${metodoCatalogoItem.route}/obtenerclasificaciondocumento`, requestOptions)
            .then(res => res.json())
            .then(res => res)
            .catch(err => err);

        if (datos.messages !== undefined) {
            return Promise.reject(datos);
        } else {
            return Promise.resolve(datos);
        }
    },
    async getEstadoDocumento(headersprivilegios) {
        var requestOptions = {
            method: 'GET',
            headers: headersprivilegios,
            redirect: 'follow',
        };

        var datos = await fetch(`${API_URL}${metodoCatalogoItem.route}/obtenertipoestadodocumento`, requestOptions)
            .then(res => res.json())
            .then(res => res)
            .catch(err => err);

        if (datos.messages !== undefined) {
            return Promise.reject(datos);
        } else {
            return Promise.resolve(datos);
        }
    },
    async obtenerclasificaciondocumento(headersprivilegios) {
        var requestOptions = {
            method: 'GET',
            headers: headersprivilegios,
            redirect: 'follow',
        };

        var datos = await fetch(`${API_URL}${metodoCatalogoItem.route}/obtenerclasificaciondocumento`, requestOptions)
            .then(res => res.json())
            .then(res => res)
            .catch(err => err);

        if (datos.messages !== undefined) {
            return Promise.reject(datos);
        } else {
            return Promise.resolve(datos);
        }
    },
    async getParentesco(headersprivilegios) {
        var requestOptions = {
            method: 'GET',
            headers: headersprivilegios,
            redirect: 'follow',
        };

        var datos = await fetch(`${API_URL}${metodoCatalogoItem.route}/obtenerparentesco`, requestOptions)
            .then(res => res.json())
            .then(res => res)
            .catch(err => err);

        if (datos.messages !== undefined) {
            return Promise.reject(datos);
        } else {
            return Promise.resolve(datos);
        }
    },
    async getTipoDocumentoIdentidad(headersprivilegios) {
        var requestOptions = {
            method: 'GET',
            headers: headersprivilegios,
            redirect: 'follow',
        };

        var datos = await fetch(`${API_URL}${metodoCatalogoItem.route}/obtenertipodocumento`, requestOptions)
            .then(res => res.json())
            .then(res => res)
            .catch(err => err);

        if (datos.messages !== undefined) {
            return Promise.reject(datos);
        } else {
            return Promise.resolve(datos);
        }
    },
    async getCargos(headersprivilegios) {
        var requestOptions = {
            method: 'GET',
            headers: headersprivilegios,
            redirect: 'follow',
        };

        var datos = await fetch(`${API_URL}${metodoCatalogoItem.route}/obtenercargos`, requestOptions)
            .then(res => res.json())
            .then(res => res)
            .catch(err => err);

        if (datos.messages !== undefined) {
            return Promise.reject(datos);
        } else {
            return Promise.resolve(datos);
        }
    },
    async getCategoria(headersprivilegios) {
        var requestOptions = {
            method: 'GET',
            headers: headersprivilegios,
            redirect: 'follow',
        };

        var datos = await fetch(`${API_URL}${metodoCatalogoItem.route}/obtenercategoria`, requestOptions)
            .then(res => res.json())
            .then(res => res)
            .catch(err => err);

        if (datos.messages !== undefined) {
            return Promise.reject(datos);
        } else {
            return Promise.resolve(datos);
        }
    },
    async getStatus(headersprivilegios) {
        var requestOptions = {
            method: 'GET',
            headers: headersprivilegios,
            redirect: 'follow',
        };

        var datos = await fetch(`${API_URL}${metodoCatalogoItem.route}/obtenerstatus`, requestOptions)
            .then(res => res.json())
            .then(res => res)
            .catch(err => err);

        if (datos.messages !== undefined) {
            return Promise.reject(datos);
        } else {
            return Promise.resolve(datos);
        }
    },
    async getStatus(headersprivilegios) {
        var requestOptions = {
            method: 'GET',
            headers: headersprivilegios,
            redirect: 'follow',
        };

        var datos = await fetch(`${API_URL}${metodoCatalogoItem.route}/obtenerstatus`, requestOptions)
            .then(res => res.json())
            .then(res => res)
            .catch(err => err);

        if (datos.messages !== undefined) {
            return Promise.reject(datos);
        } else {
            return Promise.resolve(datos);
        }
    },
    async getPaises(headersprivilegios) {
        var requestOptions = {
            method: 'GET',
            headers: headersprivilegios,
            redirect: 'follow',
        };

        var datos = await fetch(`${API_URL}${metodoCatalogoItem.route}/obtenerpaises`, requestOptions)
            .then(res => res.json())
            .then(res => res)
            .catch(err => err);

        if (datos.messages !== undefined) {
            return Promise.reject(datos);
        } else {
            return Promise.resolve(datos);
        }
    },
    async getGrupoPaises(headersprivilegios) {
        var requestOptions = {
            method: 'GET',
            headers: headersprivilegios,
            redirect: 'follow',
        };

        var datos = await fetch(`${API_URL}${metodoCatalogoItem.route}/obtenergrupopais`, requestOptions)
            .then(res => res.json())
            .then(res => res)
            .catch(err => err);

        if (datos.messages !== undefined) {
            return Promise.reject(datos);
        } else {
            return Promise.resolve(datos);
        }
    },
    async getTipoBaja(headersprivilegios) {
        var requestOptions = {
            method: 'GET',
            headers: headersprivilegios,
            redirect: 'follow',
        };

        var datos = await fetch(`${API_URL}${metodoCatalogoItem.route}/obtenertipobaja`, requestOptions)
            .then(res => res.json())
            .then(res => res)
            .catch(err => err);

        if (datos.messages !== undefined) {
            return Promise.reject(datos);
        } else {
            return Promise.resolve(datos);
        }
    },
    async getEstadoCivil(headersprivilegios) {
        var requestOptions = {
            method: 'GET',
            headers: headersprivilegios,
            redirect: 'follow',
        };

        var datos = await fetch(`${API_URL}${metodoCatalogoItem.route}/obtenerestadocivil`, requestOptions)
            .then(res => res.json())
            .then(res => res)
            .catch(err => err);

        if (datos.messages !== undefined) {
            return Promise.reject(datos);
        } else {
            return Promise.resolve(datos);
        }
    },
    async getTipoObservacion(headersprivilegios) {
        var requestOptions = {
            method: 'GET',
            headers: headersprivilegios,
            redirect: 'follow',
        };

        var datos = await fetch(`${API_URL}${metodoCatalogoItem.route}/obtenertipoobservacion`, requestOptions)
            .then(res => res.json())
            .then(res => res)
            .catch(err => err);

        if (datos.messages !== undefined) {
            return Promise.reject(datos);
        } else {
            return Promise.resolve(datos);
        }
    },
    async getAreasInforme(headersprivilegios) {
        var requestOptions = {
            method: 'GET',
            headers: headersprivilegios,
            redirect: 'follow',
        };

        var datos = await fetch(`${API_URL}${metodoCatalogoItem.route}/obtenerareasinforme`, requestOptions)
            .then(res => res.json())
            .then(res => res)
            .catch(err => err);

        if (datos.messages !== undefined) {
            return Promise.reject(datos);
        } else {
            return Promise.resolve(datos);
        }
    },
    async getTipoDocumentoIdentidad(headersprivilegios) {
        var requestOptions = {
            method: 'GET',
            headers: headersprivilegios,
            redirect: 'follow',
        };

        var datos = await fetch(`${API_URL}${metodoCatalogoItem.route}/obtenertipodocumento`, requestOptions)
            .then(res => res.json())
            .then(res => res)
            .catch(err => err);

        if (datos.messages !== undefined) {
            return Promise.reject(datos);
        } else {
            return Promise.resolve(datos);
        }
    },
    async getTipoSolicitud(headersprivilegios) {
        var requestOptions = {
            method: 'GET',
            headers: headersprivilegios,
            redirect: 'follow',
        };

        var datos = await fetch(`${API_URL}${metodoCatalogoItem.route}/obtenertiposolicitud`, requestOptions)
            .then(res => res.json())
            .then(res => res)
            .catch(err => err);

        if (datos.messages !== undefined) {
            return Promise.reject(datos);
        } else {
            return Promise.resolve(datos);
        }
    },
    async getSubtipoSolicitud(request,headersprivilegios) {
        var requestOptions = {
            method: 'GET',
            headers: headersprivilegios,
            redirect: 'follow',
        };

        var datos = await fetch(`${API_URL}${metodoCatalogoItem.route}/obtenersubtiposolicitud?${formatParameter(request)}`, requestOptions)
            .then(res => res.json())
            .then(res => res)
            .catch(err => err);

        if (datos.messages !== undefined) {
            return Promise.reject(datos);
        } else {
            return Promise.resolve(datos);
        }
    },
    async getEstadoSolicitud(request,headersprivilegios) {
        var requestOptions = {
            method: 'GET',
            headers: headersprivilegios,
            redirect: 'follow',
        };

        var datos = await fetch(`${API_URL}${metodoCatalogoItem.route}/obtenerestadosolicitud?${formatParameter(request)}`, requestOptions)
            .then(res => res.json())
            .then(res => res)
            .catch(err => err);

        if (datos.messages !== undefined) {
            return Promise.reject(datos);
        } else {
            return Promise.resolve(datos);
        }
    },
    async getCalidadMigratoria(headersprivilegios) {
        var requestOptions = {
            method: 'GET',
            headers: headersprivilegios,
            redirect: 'follow',
        };

        var datos = await fetch(`${API_URL}${metodoCatalogoItem.route}/obtenercalidadmigratoria`, requestOptions)
            .then(res => res.json())
            .then(res => res)
            .catch(err => err);

        if (datos.messages !== undefined) {
            return Promise.reject(datos);
        } else {
            return Promise.resolve(datos);
        }
    },
    async getCategoriaVehiculo(headersprivilegios) {
        var requestOptions = {
            method: 'GET',
            headers: headersprivilegios,
            redirect: 'follow',
        };

        var datos = await fetch(`${API_URL}${metodoCatalogoItem.route}/obtenercategoriavehiculo`, requestOptions)
            .then(res => res.json())
            .then(res => res)
            .catch(err => err);

        if (datos.messages !== undefined) {
            return Promise.reject(datos);
        } else {
            return Promise.resolve(datos);
        }
    },
    async getMarcaVehiculo(headersprivilegios) {
        var requestOptions = {
            method: 'GET',
            headers: headersprivilegios,
            redirect: 'follow',
        };

        var datos = await fetch(`${API_URL}${metodoCatalogoItem.route}/obtenermarcavehiculo`, requestOptions)
            .then(res => res.json())
            .then(res => res)
            .catch(err => err);

        if (datos.messages !== undefined) {
            return Promise.reject(datos);
        } else {
            return Promise.resolve(datos);
        }
    },
    async getColorVehiculo(headersprivilegios) {
        var requestOptions = {
            method: 'GET',
            headers: headersprivilegios,
            redirect: 'follow',
        };

        var datos = await fetch(`${API_URL}${metodoCatalogoItem.route}/obtenercolorvehiculo`, requestOptions)
            .then(res => res.json())
            .then(res => res)
            .catch(err => err);

        if (datos.messages !== undefined) {
            return Promise.reject(datos);
        } else {
            return Promise.resolve(datos);
        }
    },
    async getViaTraslado(headersprivilegios) {
        var requestOptions = {
            method: 'GET',
            headers: headersprivilegios,
            redirect: 'follow',
        };

        var datos = await fetch(`${API_URL}${metodoCatalogoItem.route}/obtenerviatraslado`, requestOptions)
            .then(res => res.json())
            .then(res => res)
            .catch(err => err);

        if (datos.messages !== undefined) {
            return Promise.reject(datos);
        } else {
            return Promise.resolve(datos);
        }
    },
    async getTipoDocCompralocal(headersprivilegios) {
        var requestOptions = {
            method: 'GET',
            headers: headersprivilegios,
            redirect: 'follow',
        };

        var datos = await fetch(`${API_URL}${metodoCatalogoItem.route}/obtenertipodoccompralocal`, requestOptions)
            .then(res => res.json())
            .then(res => res)
            .catch(err => err);

        if (datos.messages !== undefined) {
            return Promise.reject(datos);
        } else {
            return Promise.resolve(datos);
        }
    },
}

const isJson = (str) => {
    try {
        JSON.parse(str);
    } catch (e) {
        //Error
        //JSON is not okay
        return false;
    }

    return true;
}
